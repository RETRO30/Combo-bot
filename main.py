import config
from database.public import Admin, Executor, Task
import texts
import images
from telebot import TeleBot, types
from django.utils import timezone
from datetime import datetime

bot = TeleBot(config.token)


def move_menu(message, new_text, new_photo, keyboard):
    bot.delete_message(message.chat.id, message.id)
    if new_text:
        if new_photo:
            bot.send_photo(message.chat.id, types.InputFile(new_photo), new_text,
                           reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, new_text,
                             reply_markup=keyboard)
    else:
        bot.send_photo(message.chat.id, types.InputFile(new_photo),
                       reply_markup=keyboard)


status_to_emoji = {0: '‚ùï',
                   1: '‚è≥',
                   2: '‚ùî',
                   3: '‚úÖ',
                   4: 'üí∏',
                   5: '‚ùå',
                   6: '‚ùé',
                   7: '‚õîÔ∏è'}


def str_time(time):
    format = '%d.%m.%Y %H:%M (–ø–æ –ú–°–ö)'
    return timezone.localtime(time).strftime(format)


def time_str(time):
    format = '%d.%m.%Y %H:%M'
    return datetime.strptime(time, format)


beautiful_name = {'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': '‚öôÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                  '–ó–∞–¥–∞–Ω–∏—è': 'üí∞–ó–∞–¥–∞–Ω–∏—è',
                  '–û—Ç–∑—ã–≤—ã': '‚òéÔ∏è–û—Ç–∑—ã–≤—ã',
                  '–ì–∞–π–¥—ã': 'üìú –ì–∞–π–¥—ã',
                  '–û–ø–ª–∞—Ç–∞': 'üí≥–û–ø–ª–∞—Ç–∞',
                  '–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞': 'üë®üèø‚Äçüîß–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞'}


def get_buttons(command, only_buttons=False):
    name_to_command = {'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'start',
                       '–ó–∞–¥–∞–Ω–∏—è': 'tasks_executor',
                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º': 'tasks_executor',
                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º': 'tasks_for_admins',
                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º': 'unpaid_tasks_for_admins',
                       '–û—Ç–∑—ã–≤—ã': 'https://t.me/+XIa54kP106AwZjgy',
                       '–ì–∞–π–¥—ã': 'https://t.me/+FLhhvT5ZNHM4MDky',
                       '–ñ–∞–ª–æ–±—ã –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π': 'https://t.me/+ZTkl2mi_B8I5ZGQ6',
                       '–û–ø–ª–∞—Ç–∞': 'payment',
                       '–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞': 'support',
                       '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑': 'create_task',
                       '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤': 'https://t.me/+TmIUUWpRgPE1N2Uy',
                       '–ó–∞–∫–∞–∑—ã': 'tasks_for_admins',
                       '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã': 'unpaid_tasks_for_admins',
                       '–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è': 'admin_menu',
                       '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': 'add_admin'}
    buttons_for_command = {'start': ['–ó–∞–¥–∞–Ω–∏—è', '–û—Ç–∑—ã–≤—ã', '–ì–∞–π–¥—ã', '–û–ø–ª–∞—Ç–∞', '–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
                           'test': ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                           'payment': ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                           'task_': ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º'],
                           'admin_task_': ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º'],
                           'admin_unpaid_task_': ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º'],
                           'support': ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                           'admin_menu': ['–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', '–ó–∞–∫–∞–∑—ã', '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', '–ñ–∞–ª–æ–±—ã –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
                                          '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                           'tasks_for_admins': ['–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è'],
                           'unpaid_tasks_for_admins': ['–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è'],
                           'tasks_executor': ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                           'manage_admins': ['–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è']}
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    res = []
    for button_name in buttons_for_command[command.replace('/', '')]:
        if name_to_command[button_name].startswith('https://t.me/'):
            if button_name in beautiful_name.keys():
                res.append(types.InlineKeyboardButton(beautiful_name[button_name], url=name_to_command[button_name]))
            else:
                res.append(types.InlineKeyboardButton(button_name, url=name_to_command[button_name]))
        else:
            if button_name in beautiful_name.keys():
                res.append(
                    types.InlineKeyboardButton(beautiful_name[button_name], callback_data=name_to_command[button_name]))
            else:
                res.append(
                    types.InlineKeyboardButton(button_name, callback_data=name_to_command[button_name]))
    if only_buttons:
        return res
    keyboard.add(*res)
    return keyboard


def add_payment_method_end(message):
    current_executor = Executor.objects.get(telegram_id=message.chat.id)
    current_executor.payment_method = message.text
    current_executor.save()
    bot.reply_to(message, '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω.')


def get_to_ready_task(message, executor, task):
    if not message.photo:
        bot.reply_to(message, '–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã')
        bot.register_next_step_handler(message, lambda msg: get_to_ready_task(msg, executor, task))
    task.mark_ready()
    if task.status == Task.READY_NOT_CHECKED:
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'admin_accept_{task.id}'))
        keyboard.add(types.InlineKeyboardButton('–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É', callback_data=f'admin_to_finalize_{task.id}'))
        keyboard.add(types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin_cancel_{task.id}'))
        bot.send_message(executor.telegram_id, '–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç')
        bot.send_photo(chat_id=task._admin.telegram_id, photo=message.photo[-1].file_id,
                       caption=f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –∑–∞–∫–∞–∑: {task.short_name} #{task.id}. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{executor.username}',
                       reply_markup=keyboard)
    elif task.status == Task.FUCKED_UP:
        bot.send_message(executor.telegram_id, '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤–æ–≤—Ä–µ–º—è')
        bot.send_photo(chat_id=task._admin.telegram_id, photo=message.photo[-1].file_id,
                       caption=f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–æ—Å—Ä–∞–ª –∑–∞–∫–∞–∑: {task.short_name} #{task.id}. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{executor.username}')


def create_task(message, admin_id):
    data = [_.strip() for _ in message.text[1:].split('-')]
    try:
        new_task = Task.objects.create(short_name=data[0],
                                       post_link=data[1],
                                       planned_time=time_str(data[2]),
                                       description=data[3],
                                       feedback_content=data[4],
                                       execution_price=data[6],
                                       _admin=Admin.objects.get(telegram_id=admin_id),
                                       _order_price=float(data[5]))
        new_task._note = data[7]
    except Exception as e:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.')
    else:
        bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω.')
        new_task.save()


def add_admin(message):
    data = [_.strip() for _ in message.text[1:].split('-')]
    try:
        admin = Admin.objects.create(telegram_id=data[0], username=data[1])
    except Exception as e:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.')
    else:
        bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω.')
        admin.save()


def edit_task(message, task):
    data = [_.strip() for _ in message.text[1:].split('-')]
    try:
        task.short_name = data[0],
        task.post_link = data[1],
        task.planned_time = time_str(data[2]),
        task.description = data[3],
        task.feedback_content = data[4],
        task.execution_price = data[6],
        _order_price = float(data[5])
        task._note = data[7]
    except Exception as e:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.')
    else:
        bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω—ë–Ω.')
        task.save()


def get_id_executor(message):
    bot.send_message(message.chat.id, f'ID: {Executor.objects.get(username=message.text).telegram_id}')


def ban_executor(message):
    data = [_.strip() for _ in message.text[1:].split('-')]
    executor = Executor.objects.get(telegram_id=int(data[0]))
    executor.time_unbanned = time_str(data[1])
    bot.send_message(message.chat.id, '–í—ã –∑–∞–±–∞–Ω–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')


@bot.message_handler(commands=['start'])
def menu(message):
    keyboard = get_buttons(message.text)
    if message.chat.id not in [executor for executor in Executor.objects.values_list('telegram_id', flat=True)]:
        Executor.objects.create(telegram_id=message.chat.id, username=message.chat.username)
    if message.chat.id in [admin for admin in Admin.objects.values_list('telegram_id', flat=True)]:
        keyboard.add(types.InlineKeyboardButton('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data='admin_menu'))
    move_menu(message, texts.text_menu, images.image_executor_menu, keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == 'cancel':
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.delete_message(call.message.chat.id, call.message.id)

        if call.data == 'edit_payment_method':
            current_executor = Executor.objects.get(telegram_id=call.message.chat.id)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–¢–µ–∫—É—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {current_executor.payment_method}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, add_payment_method_end)

        if call.data == 'add_payment_method':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=keyboard)
            bot.register_next_step_handler(call.message, add_payment_method_end)

        if call.data == 'payment':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            buttons = get_buttons(call.data, only_buttons=True)
            current_executor = Executor.objects.get(telegram_id=call.message.chat.id)
            if current_executor.payment_method:
                keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data='edit_payment_method'))
            else:
                keyboard.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data='add_payment_method'))
            keyboard.add(*buttons)
            move_menu(call.message, texts.text_payment, images.image_executor_payment, keyboard)

        if call.data.startswith('accept_task_'):
            task = Task.objects.get(id=int(call.data.replace('accept_task_', '')))
            current_executor = Executor.objects.get(telegram_id=call.message.chat.id)
            keyboard = get_buttons('task_')
            if task.status == Task.PENDING:
                task.mark_accepted(current_executor)
                move_menu(call.message, texts.text_accept_task, images.image_accept_task, keyboard)
            else:
                move_menu(call.message, texts.text_accept_task_error, images.image_error, keyboard)

        if call.data.startswith('to_ready_task_'):
            task = Task.objects.get(id=int(call.data.replace('to_ready_task_', '')))
            current_executor = Executor.objects.get(telegram_id=call.message.chat.id)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–π —Ä–∞–±–æ—Ç—ã',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, lambda msg: get_to_ready_task(msg, current_executor, task))

        if call.data.startswith('task_'):
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            task = Task.objects.get(id=int(call.data.replace('task_', '')))
            text_for_task = f'‚ùó{task.short_name}\n‚ùó{task.description}' \
                            f'\n‚ùó{task.post_link}\n‚ùó{task.execution_price} —Ä—É–±–ª–µ–π' \
                            f'\n‚ùó{task.feedback_content}' \
                            f'\n‚ùó{str_time(task.planned_time)}'
            if task.status == Task.PENDING:
                keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'accept_task_{task.id}'))
            if task.status == Task.IN_WORK:
                keyboard.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ', callback_data=f'to_ready_task_{task.id}'))

            buttons = get_buttons('task_', only_buttons=True)
            keyboard.add(*buttons)
            move_menu(call.message, text_for_task, images.image_executor_task, keyboard)

        if call.data == 'tasks_executor':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            current_executor = Executor.objects.get(telegram_id=call.message.chat.id)
            res = []
            for task in current_executor.get_current_tasks():
                res.append(
                    types.InlineKeyboardButton(
                        f'{str_time(task.planned_time)} - {task.short_name} #{str(task.id)} {status_to_emoji[task.status]}',
                        callback_data='task_' + str(task.id)))
            for task in current_executor.get_done_tasks():
                res.append(
                    types.InlineKeyboardButton(f'{task.short_name} #{str(task.id)} {status_to_emoji[task.status]}',
                                               callback_data='task_' + str(task.id)))
            for task in current_executor.get_available_tasks():
                res.append(
                    types.InlineKeyboardButton(
                        f'{str_time(task.planned_time)} - {task.short_name} #{str(task.id)} {status_to_emoji[task.status]}',
                        callback_data='task_' + str(task.id)))
            keyboard.add(*res)

            buttons = get_buttons(call.data, only_buttons=True)

            keyboard.add(*buttons)
            move_menu(call.message, texts.text_tasks, images.image_executor_tasks, keyboard)

        if call.data == 'start':
            keyboard = get_buttons(call.data)
            if call.message.chat.id in [admin for admin in Admin.objects.values_list('telegram_id', flat=True)]:
                keyboard.add(types.InlineKeyboardButton('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data='admin_menu'))
            move_menu(call.message, texts.text_menu, images.image_executor_menu, keyboard)

        if call.data == 'support':
            keyboard = get_buttons(call.data)
            move_menu(call.message, texts.text_support, images.image_support_menu, keyboard)

        if call.data.startswith('admin_accept_'):
            task = Task.objects.get(id=int(call.data.replace('admin_accept_', '')))
            task.mark_checked()
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç—á—ë—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')

        if call.data.startswith('admin_to_finalize_'):
            task = Task.objects.get(id=int(call.data.replace('admin_to_finalize_', '')))
            task.mark_accepted(task.executor)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É')

        if call.data.startswith('admin_cancel_'):
            task = Task.objects.get(id=int(call.data.replace('admin_cancel_', '')))
            task.mark_fuckedup(task.executor)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ—Ç—á—ë—Ç')

        if call.data == 'admin_menu':
            keyboard = get_buttons(call.data)
            if call.message.chat.id in [admin[0] for admin in Admin.objects.values_list('telegram_id', 'role') if
                                        admin[1] == 'super-admin']:
                keyboard.add(types.InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π', callback_data='manage_admins'))
                keyboard.add(types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å id –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', callback_data='get_id_executor'))
                keyboard.add(types.InlineKeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', callback_data='ban_executor'))
            move_menu(call.message, '', images.image_admin_menu, keyboard)

        if call.data.startswith('admin_task_'):
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            task = Task.objects.get(id=int(call.data.replace('admin_task_', '')))
            text_for_task = f'‚ùó–ù–∞–∑–≤–∞–Ω–∏–µ: {task.short_name}\n‚ùó–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}' \
                            f'\n‚ùó–°—Å—ã–ª–∫–∞: {task.post_link}\n‚ùó–¶–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {task.execution_price} —Ä—É–±–ª–µ–π' \
                            f'\n‚ùó–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {task._order_price}  —Ä—É–±–ª–µ–π' \
                            f'\n‚ùó–û—Ç–∑—ã–≤: {task.feedback_content}' \
                            f'\n‚ùó–í—Ä–µ–º—è: {str_time(task.planned_time)}' \
                            f'\n‚ùó–°—Ç–∞—Ç—É—Å: {task.STATUSES[task.status][1]}'
            if task.status != Task.PENDING:
                text_for_task += f'\n‚ùó–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{task.executor.username}' \
                                 f'\n‚ùó–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {task.executor.payment_method}'
            keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit_task_' + str(task.id)))
            keyboard.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete_task_' + str(task.id)))
            buttons = get_buttons('admin_task_', only_buttons=True)
            keyboard.add(*buttons)
            move_menu(call.message, text_for_task, images.image_admin_menu, keyboard)

        if call.data.startswith('edit_task_'):
            task = Task.objects.get(id=int(call.data.replace('edit_task_', '')))
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã\n{texts.text_create_task}',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, lambda msg: edit_task(msg, task))

        if call.data.startswith('delete_task_'):
            task = Task.objects.get(id=int(call.data.replace('delete_task_', '')))
            task.delete()
            bot.send_message(call.message.chat.id,
                             '–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω')

        if call.data.startswith('admin_unpaid_task_'):
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            task = Task.objects.get(id=int(call.data.replace('admin_unpaid_task_', '')))
            text_for_task = f'‚ùó–ù–∞–∑–≤–∞–Ω–∏–µ: {task.short_name}\n‚ùó–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}' \
                            f'\n‚ùó–°—Å—ã–ª–∫–∞: {task.post_link}\n‚ùó–¶–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {task.execution_price} —Ä—É–±–ª–µ–π' \
                            f'\n‚ùó–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {task._order_price}' \
                            f'\n‚ùó–û—Ç–∑—ã–≤: {task.feedback_content}' \
                            f'\n‚ùó–í—Ä–µ–º—è: {str_time(task.planned_time)}' \
                            f'\n‚ùó–°—Ç–∞—Ç—É—Å: {task.STATUSES[task.status][1]}'
            if task.status != Task.PENDING:
                text_for_task += f'\n‚ùó–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{task.executor.username}' \
                                 f'\n‚ùó–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {task.executor.payment_method}'

            keyboard.add(types.InlineKeyboardButton('–û–ø–ª–∞—á–µ–Ω–æ', callback_data='mark_paid_' + str(task.id)))
            buttons = get_buttons('admin_unpaid_task_', only_buttons=True)
            keyboard.add(*buttons)
            move_menu(call.message, text_for_task, images.image_executor_menu, keyboard)

        if call.data.startswith('mark_paid_'):
            task = Task.objects.get(id=int(call.data.replace('mark_paid_', '')))
            task.mark_paid()
            bot.send_message(chat_id=call.message.chat.id, text='–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º')

        if call.data == 'create_task':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã\n{texts.text_create_task}',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, lambda msg: create_task(msg, call.message.chat.id))

        if call.data == 'tasks_for_admins':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            admin = Admin.objects.get(telegram_id=call.message.chat.id)
            for task in admin.get_tasks():
                keyboard.add(types.InlineKeyboardButton(
                    f'{str_time(task.planned_time)} - {task.short_name} #{str(task.id)} {status_to_emoji[task.status]}',
                    callback_data='admin_task_' + str(task.id)))
            buttons = get_buttons(call.data, only_buttons=True)
            keyboard.add(*buttons)
            move_menu(call.message, texts.text_tasks_for_admins, images.image_admin_menu, keyboard)

        if call.data == 'unpaid_tasks_for_admins':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            admin = Admin.objects.get(telegram_id=call.message.chat.id)
            for task in admin.get_tasks_by_status(Task.READY_CHECKED):
                keyboard.add(types.InlineKeyboardButton(
                    f'{str_time(task.planned_time)} - {task.short_name} #{str(task.id)} {status_to_emoji[task.status]}',
                    callback_data='admin_unpaid_task_' + str(task.id)))
            buttons = get_buttons(call.data, only_buttons=True)
            keyboard.add(*buttons)
            move_menu(call.message, texts.text_unpaid_tasks_for_admins, images.image_admin_menu, keyboard)

        if call.data == 'manage_admins':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            for admin in [admin for admin in Admin.objects.values_list('telegram_id', 'username')]:
                keyboard.add(types.InlineKeyboardButton(f'{admin[1]}', callback_data=f'info_admin_{admin[0]}'))
            buttons = get_buttons(call.data, only_buttons=True)
            keyboard.add(*buttons)
            move_menu(call.message, texts.text_manage_admins, images.image_admin_menu, keyboard)

        if call.data.startswith('info_admin_'):
            admin = Admin.objects.get(telegram_id=call.data.replace('info_admin_', ''))
            text_admin = f'{admin.telegram_id}\n@{admin.username}\n{admin.role}'
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_admin_{admin.telegram_id}'))
            keyboard.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', callback_data='manage_admins'))
            move_menu(call.message, text_admin, images.image_admin_menu, keyboard)

        if call.data.startswith('delete_admin_'):
            admin = Admin.objects.get(telegram_id=call.data.replace('delete_admin_', ''))
            admin.delete()
            bot.send_message(chat_id=call.message.chat.id, text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω.')

        if call.data == 'add_admin':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã\n{texts.text_add_admin}',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, lambda msg: add_admin(msg))

        if call.data == 'get_id_executor':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–ü–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ username:',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, lambda msg: get_id_executor(msg))

        if call.data == 'ban_executor':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel'))
            bot.send_message(call.message.chat.id,
                             f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ\n-id\n-–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º (–≤—Ä–µ–º—è —Ä–∞–∑–±–∞–Ω–∞)',
                             reply_markup=keyboard)
            bot.register_next_step_handler(call.message, lambda msg: ban_executor(msg))


@bot.message_handler(func=lambda message: True)
async def reply_message(message):
    if message.chat.type == 'private':
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.')


if __name__ == '__main__':
    bot.infinity_polling()
